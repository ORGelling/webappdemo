#common commands
symfony 
#check requirements
symfony check:req 
#new app
symfony new [name] 
#start server
symfony serve 

# index.php is the default file. Located in public folder, with all other files accessible from a webbrowser.
# index.php is a front controller and controls all access to all other files in the rest of the framework. Does not need to be changed.

# src source folder holds all php code.
# controller folder: create new file called HomeController. Define HomeController class with "public method" index()

# define a Route to enable the framework to run the index method
# best way to do this is to use php attributes
# add a use statement above the class to import it into the current namespace.
# Controller action method needs to return a Response class.
# add use statement for Response class and return type declaration for the index() method.

# symfony flex modifies composer behaviour to allow for executing additional commands after installation

# HTML content to be output goes in separate files called templates, which can be created with twig library
composer require symfony/twig-bundle
# this also creates a templates folder
# use directories to match controller name (like home) and files to match method name (index). 
# suffix: .html.twig

# Load and output template: extend a base class
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
(...)
class HomeController extends AbstractController
{
    #[Route('/')]
    public function index: Response
    {
        $contents = $this->renderView('home/index.html.twig');
        return new Response($contents);
    }
}

# Shorter way: Render method
return $this->render('home/index.html.twig');

# twig allows template inheritance 
# extend base.html.twig template. Use twig blocks!
{% extends 'base.html.twig' %}

# symfony can create these with the maker bundle:
composer require --dev symfony/maker-bundle

# Recipes and aliases make installing these simpler
composer require maker --dev

# run this to see available commands
php bin/console
php bin/console list
# may not need to write "php " here 

bin/console help make:controller # shows options and usage

bin/console make:controller Product # To generate controller called "Product". Will ask if no name given. Name gets suffixed with "Controller"

# This has namespaces, AbstractController class, and includes an index method with a Route.

# ProductController has a name specified in the Route, which allows more easy use of link redirecting.
# Call to render is different. passes data to view template.

# A template was generated inside the templates/product folder, "index.html.twig". Look at {{ controller_name }}!






bin/console dbal:run-sql "SELECT * FROM product"